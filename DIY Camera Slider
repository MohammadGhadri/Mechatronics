/*
  DIY Camera Slider with Pan and Tilt Head

  Mohammad Ghadri - 9656018
  mohammadghadri18@gmail.com

  Mechatronic Project - 99_1
*/

/*
در ابتدا ما باید تمام پین های آردوینو را که قرار است مورد استفاده قرار بگیرند را تعریف کنیم.
 نمونه ها را برای استپر موتورها و همچنین برخی از متغیرهای دیگر مورد نیاز برای برنامه را تعریف کنیم.
*/

// Libraries
#include <AccelStepper.h> 
#include <MultiStepper.h>

// Variables
#define JoyX A0         // Joystick X pin
#define JoyY A1         // Joystick Y pin
#define slider A2       // Slider potentiometer
#define inOutPot A3     // In and Out speed potentiometer
#define JoySwitch 10    // Joystick switch connected
#define InOutSet 12     // Set Button
#define limitSwitch 11  // limitSwitch
#define inLED 8         // in LED 
#define outLED 9        // out LED 

/*
موتورهای پله ای و پایه هایی را که استفاده می کنید تعریف کنید.
*/

AccelStepper stepper1(1, 7, 6); // (Type:driver, STEP, DIR)
AccelStepper stepper2(1, 5, 4);
AccelStepper stepper3(1, 3, 2);

MultiStepper StepperControl;  /* نمونه ای از MultiStepper ایجاد کنید. */

long gotoposition[3]; /* آرایه ای برای ذخیره موقعیت In یا Out برای هر موتور پله ای */

int JoyXPos      = 0  ;
int JoyYPos      = 0  ;
int sliderPos    = 0  ;

int currentSpeed = 100;
int in_Out_Speed = 100;

int X_In_Point  = 0, Y_In_Point  = 0, Z_In_Point  = 0;
int X_Out_Point = 0, Y_Out_Point = 0, Z_Out_Point = 0;

int InandOut  = 0;

/*
در بخش تنظیمات، مقادیر سرعت اولیه را برای استپرها تنظیم می کنیم،
 برخی از حالت های پین را تعریف می کنیم،
 همچنین سه استپر را به نمونه کنترل چند پله ای موسوم به "StepperControl" اضافه می کنیم.
با استفاده از حلقه while، نوار لغزنده را به موقعیت اولیه منتقل می کنیم،
یا حرکت می کند تا زمانی که سوئیچ لیمیت را فشار دهد و سپس 200 قدم به عقب برمی گردد تا سوئیچ لیمیت را آزاد کند.
*/

void setup() {
    /* مقادیر اولیه seed را برای استپرها تعیین کنید. */
    stepper1.setMaxSpeed(3000); stepper1.setSpeed(200);
    stepper2.setMaxSpeed(3000); stepper2.setSpeed(200);
    stepper3.setMaxSpeed(3000); stepper3.setSpeed(200);
    
    pinMode(JoySwitch,   INPUT_PULLUP);
    pinMode(InOutSet,    INPUT_PULLUP);
    pinMode(limitSwitch, INPUT_PULLUP);
    pinMode(inLED,       OUTPUT      );
    pinMode(outLED,      OUTPUT      );
  
    /* نمونه هایی برای MultiStepper ایجاد کنید - اضافه کردن 3 استپر به نمونه Stepper Control برای چند کنترلی */
    StepperControl.addStepper(stepper1);
    StepperControl.addStepper(stepper2);
    StepperControl.addStepper(stepper3);
  
    /* نوار لغزنده را به موقعیت اولیه منتقل کنید – نقطه اولیه */
    while (digitalRead(limitSwitch) != 0) {
           stepper1.setSpeed(3000);
           stepper1.runSpeed();
           stepper1.setCurrentPosition(0); /* هنگامی که سوئیچ لیمیت فشار داده می شود، موقعیت را روی استپ صفر تنظیم کنید. */
          }//While
          
    delay(20);
    
 /* از سوئیچ لیمیت 200 استپ به سمت عقب بروید */
    while (stepper1.currentPosition() != -200) {
           stepper1.setSpeed(-3000);
           stepper1.run();
          }//While
}//void

void loop() {
    /* محدود کردن حرکت - در صورت فشردن کلید لیمیت یا مسافت طی مسیر دیگری بیش از 80 سانتی متر، کاری انجام ندهید. */
    while (digitalRead(limitSwitch) == 0 || stepper1.currentPosition() < -64800) {} //While
    
    /* با عبارت if بعد با هر بار فشار سوئیچ جوی استیک سرعت Pan و Tilt را افزایش می دهیم. */
    /* اگر جوی استیک فشار داده شود سرعت Pan و Tilt را افزایش داده می شود. */
    if (digitalRead(JoySwitch) == 0) {
      currentSpeed = currentSpeed + 50;
      delay(200);
    }//if
    /* اگر دکمه Set فشار داده شود - بین موارد کلید تغییر وضعیت می دهد. */
    if (digitalRead(InOutSet) == 0) {
      delay(500);
      /* اگر دکمه تنظیم را بیشتر از نیم ثانیه فشار دهیم، موقعیت های In و Out را تنظیم می کند. */
      if (digitalRead(InOutSet) == 0) {
        InandOut = 4;
      }//if
  
  /*       
   سپس بررسی می کنیم که آیا دکمه Set را فشار داده ایم که برای تنظیم موقعیت های IN و OUT استفاده می شود یا خیر.
  با فشار دادن اولین دکمه موقعیت IN موتورهای پله ای را ذخیره می کنیم و همچنین IN LED را روشن می کنیم.
  */
      switch (InandOut) { 
        case 0:   /* موقعیت IN را تنظیم کنید. */
          InandOut = 1;
          /* X Stepper 1                              Y Stepper 2                                 Z Stepper 3                           */
          X_In_Point = stepper1.currentPosition();    Y_In_Point = stepper2.currentPosition();    Z_In_Point = stepper3.currentPosition(); 
          digitalWrite(inLED, HIGH); /* روشن کنید inLed */
          break;
  /*
   به همین ترتیب، با فشار دوم موقعیت های OUT را ذخیره می کنیم و LED OUT را روشن می کنیم.
  */
        case 1: /* موقعیت OUT را تنظیم کنید. */
          InandOut = 2;
          /* و OUT Points  را برای هر دو استپر تنظیم کنید. */
          X_Out_Point = stepper1.currentPosition(); Y_Out_Point = stepper2.currentPosition(); Z_Out_Point = stepper3.currentPosition();
          digitalWrite(outLED, HIGH);
          break;
  /*
    سپس با فشار بعدی دکمه ، مقدار پتانسیومتر سرعت خودکار را می خوانیم که برای تنظیم حداکثر سرعت موتورها استفاده می شود.
    همچنین موقعیت های IN را در آرایه "gotoposition" قرار می دهیم که در تابع moveTo () استفاده می شود و سرعت مورد نیاز برای همه استپرها را جداگانه محاسبه می کند.
  سپس با استفاده از عملکرد runSpeedToPosition (لغزنده) خودکار لغزنده به حالت In حرکت می کند. 
  */
        case 2: /* به موقعیت IN بروید / به case 3 بروید. */
          InandOut = 3;
          in_Out_Speed = analogRead(inOutPot); /* پتانسیومتر سرعت خودکار */
          /* موقعیت IN را در آرایه قرار دهید. */
          gotoposition[0] = X_In_Point; gotoposition[1] = Y_In_Point; gotoposition[2] = Z_In_Point;
          
          stepper1.setMaxSpeed(in_Out_Speed);
          stepper2.setMaxSpeed(in_Out_Speed);
          stepper3.setMaxSpeed(in_Out_Speed);
          
          StepperControl.moveTo(gotoposition); /* سرعت مورد نیاز برای تمام موتورها را محاسبه می کند. */
  
          StepperControl.runSpeedToPosition(); /* مسدود می شود تا زمانی که همه استپرها در موقعیت قرار بگیرند. */
          
          delay(200);
          
          break;
  /*
   دقیقاً به همین ترتیب ، در حالت شماره 3 یا با فشار مجدد یک دکمه ، نوار لغزنده را به موقعیت OUT منتقل می کنیم.
  */
        case 3: /* به موقعیت OUT بروید / به case 2 برگردید */
          InandOut = 2;
          in_Out_Speed = analogRead(inOutPot);
          /* موقعیت OUT را در آرایه قرار دهید */
          gotoposition[0] = X_Out_Point; gotoposition[1] = Y_Out_Point; gotoposition[2] = Z_Out_Point;
          
          stepper1.setMaxSpeed(in_Out_Speed);
          stepper2.setMaxSpeed(in_Out_Speed);
          stepper3.setMaxSpeed(in_Out_Speed);
          
          StepperControl.moveTo(gotoposition); /* سرعت مورد نیاز برای تمام موتورها را محاسبه می کند. */
          StepperControl.runSpeedToPosition(); /* مسدود تا زمانی که همه در موقعیت قرار بگیرند. */
          delay(200);
          break;
  
        case 4: /* اگر دکمه Set طولانی تر نگه داشته شود ، نیم ثانیه به case 0 برگردد. */
          InandOut = 0;
          digitalWrite(inLED, LOW);
          digitalWrite(outLED, LOW);
          delay(1000);
          break;
      }//switch
    }//if
  
  /*
  در صورت نگه داشتن دکمه Set برای مدت زمان طولانی تر از نیم ثانیه، عبارت 4 اجرا می شود ، که موقعیت IN و OUT را بازنشانی می کند تا بتوانیم موارد جدید را تنظیم کنیم.
  قسمت بعدی جوی استیک کنترل Pan و  Tiltاست.
  مقدار آنالوگ ما از جوی استیک دریافت می کنیم از 0 تا 1024 است، یا وقتی که در وسط قرار بگیرد مقادیر حدود 500 است.
  بنابراین اگر جوی استیک را به سمت چپ حرکت دهیم و مقدار آنالوگ بیشتر از 600 باشد ، سرعت موتور خاص را روی مثبت قرار می دهیم،
  و در مقابل، ما جوی استیک را به سمت راست حرکت می دهیم، سرعت موتور را روی منفی تنظیم می کنیم،
  که بدین معنی است که برعکس خواهد چرخید.
  */
    /* جوی استیک  X، حرکت Pan  */
    JoyXPos = analogRead(JoyX);
    /* اگر جوی استیک به سمت چپ منتقل شد، استپر 2 یا Pan را به سمت چپ حرکت می دهد. */
    if (JoyXPos > 600) {
      stepper2.setSpeed(currentSpeed);
    }//if
    /* اگر جوی استیک به سمت راست منتقل شد، استپر 2 یا Pan را به سمت راست حرکت می دهد. */
    else if (JoyXPos < 400) {
      stepper2.setSpeed(-currentSpeed);
    }//else if
    /* اگر جوی استیک در وسط بماند، هیچ حرکتی وجود نمی دهد. */
    else {
      stepper2.setSpeed(0);
    }//else
  
    /* جوی استیک Y  حرکت Tilt */
    JoyYPos = analogRead(JoyY);
    if (JoyYPos > 600) {
      stepper3.setSpeed(currentSpeed);
    }// if
    else if (JoyYPos < 400) {
      stepper3.setSpeed(-currentSpeed);
    }// else if
    else {
      stepper3.setSpeed(0);
    }//else
  /*
   در صورت ماندن در وسط ، سرعت روی 0 تنظیم می شود.
   این روش برای هر دو محور جوی استیک و همچنین پتانسیومتر کشویی استفاده می شود.
   در واقع، در مورد پتانسیومتر از مقدار آنالوگ آن استفاده می کنیم تا با چرخش بیشتر پتانسیومتر، سرعت موتور را نیز افزایش دهیم.
  */
  
    /* پتانسیومتر اسلایدر */
    sliderPos = analogRead(slider);
    /* اگر پتانسیومتر به چپ چرخانده شده است، اسلایدر را به سمت چپ حرکت می کند. */
    if (sliderPos > 600) {
      sliderPos = map(sliderPos, 600, 1024, 0, 3000);
      stepper1.setSpeed(sliderPos); /* در هنگام چرخش سرعت را افزایش می دهد. */
    }//if
    /* اگر پتانسیومتر به راست چرخانده شده است، اسلایدر را به سمت راست حرکت میکند. */
    else if (sliderPos < 400 ) {
      sliderPos = map(sliderPos, 400, 0, 0, 3000);
      stepper1.setSpeed(-sliderPos); /* در هنگام چرخش سرعت را افزایش می دهد. */
    }//else if
    /* اگر پتانسیومتر در وسط باشد، هیچ حرکتی وجود نمی کند. */
    else {
      stepper1.setSpeed(0);
    }//else
  
  /*   
    در آخر، ما برای هر یک از سه موتور پله ای توابع runSpeed () را فراخوانی می کنیم و دستورات فوق را اجرا می کند،
   یا به عبارت دیگر موتورها را به طور مناسب می چرخاند. 
  */
  
    /* دستورات بالا را اجرا کنید - موتورهای پله ای را اجرا کنید. */
    stepper1.runSpeed();
    stepper2.runSpeed();
    stepper3.runSpeed();
}//void
